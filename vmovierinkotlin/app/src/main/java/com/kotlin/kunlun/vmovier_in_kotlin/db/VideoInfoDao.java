package com.kotlin.kunlun.vmovier_in_kotlin.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;


import com.kotlin.kunlun.vmovier_in_kotlin.entity.VideoInfo;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VIDEO_INFO".
*/
public class VideoInfoDao extends AbstractDao<VideoInfo, Long> {

    public static final String TABLENAME = "VIDEO_INFO";

    /**
     * Properties of entity VideoInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property DownloadId = new Property(1, int.class, "downloadId", false, "DOWNLOAD_ID");
        public final static Property DownloadStatus = new Property(2, int.class, "downloadStatus", false, "DOWNLOAD_STATUS");
        public final static Property PostId = new Property(3, String.class, "postId", false, "POST_ID");
        public final static Property Image = new Property(4, String.class, "image", false, "IMAGE");
        public final static Property Title = new Property(5, String.class, "title", false, "TITLE");
        public final static Property Duration = new Property(6, String.class, "duration", false, "DURATION");
        public final static Property Filesize = new Property(7, String.class, "filesize", false, "FILESIZE");
        public final static Property Source_link = new Property(8, String.class, "source_link", false, "SOURCE_LINK");
        public final static Property Qiniu_url = new Property(9, String.class, "qiniu_url", false, "QINIU_URL");
    }


    public VideoInfoDao(DaoConfig config) {
        super(config);
    }
    
    public VideoInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VIDEO_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"DOWNLOAD_ID\" INTEGER NOT NULL ," + // 1: downloadId
                "\"DOWNLOAD_STATUS\" INTEGER NOT NULL ," + // 2: downloadStatus
                "\"POST_ID\" TEXT," + // 3: postId
                "\"IMAGE\" TEXT," + // 4: image
                "\"TITLE\" TEXT," + // 5: title
                "\"DURATION\" TEXT," + // 6: duration
                "\"FILESIZE\" TEXT," + // 7: filesize
                "\"SOURCE_LINK\" TEXT," + // 8: source_link
                "\"QINIU_URL\" TEXT);"); // 9: qiniu_url
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VIDEO_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VideoInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getDownloadId());
        stmt.bindLong(3, entity.getDownloadStatus());
 
        String postId = entity.getPostId();
        if (postId != null) {
            stmt.bindString(4, postId);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(5, image);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
 
        String duration = entity.getDuration();
        if (duration != null) {
            stmt.bindString(7, duration);
        }
 
        String filesize = entity.getFilesize();
        if (filesize != null) {
            stmt.bindString(8, filesize);
        }
 
        String source_link = entity.getSource_link();
        if (source_link != null) {
            stmt.bindString(9, source_link);
        }
 
        String qiniu_url = entity.getQiniu_url();
        if (qiniu_url != null) {
            stmt.bindString(10, qiniu_url);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VideoInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getDownloadId());
        stmt.bindLong(3, entity.getDownloadStatus());
 
        String postId = entity.getPostId();
        if (postId != null) {
            stmt.bindString(4, postId);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(5, image);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
 
        String duration = entity.getDuration();
        if (duration != null) {
            stmt.bindString(7, duration);
        }
 
        String filesize = entity.getFilesize();
        if (filesize != null) {
            stmt.bindString(8, filesize);
        }
 
        String source_link = entity.getSource_link();
        if (source_link != null) {
            stmt.bindString(9, source_link);
        }
 
        String qiniu_url = entity.getQiniu_url();
        if (qiniu_url != null) {
            stmt.bindString(10, qiniu_url);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public VideoInfo readEntity(Cursor cursor, int offset) {
        VideoInfo entity = new VideoInfo( //
            cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // downloadId
            cursor.getInt(offset + 2), // downloadStatus
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // postId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // image
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // title
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // duration
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // filesize
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // source_link
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // qiniu_url
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VideoInfo entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setDownloadId(cursor.getInt(offset + 1));
        entity.setDownloadStatus(cursor.getInt(offset + 2));
        entity.setPostId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImage(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTitle(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDuration(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFilesize(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSource_link(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setQiniu_url(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(VideoInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(VideoInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(VideoInfo entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
